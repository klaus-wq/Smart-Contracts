
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

contract listOfTasks {
    //uint32 public timestamp;
    struct Task {
        string title;
        uint32 timestamp;
        bool isDone;
    }

    uint8[] keys;
    mapping(uint8 => Task) public tasks;

    //добавить задачу (должен в сопоставление заполняться последовательный целочисленный ключ)
    function setTask(string _title, uint32 _timestamp, bool _isDone) public returns(Task){
        Task newTask = Task(_title, _timestamp, _isDone);
        tasks[uint8(keys.length)] = newTask;
        keys.push(uint8(keys.length));
        return tasks[uint8(keys.length)];
    }

    //получить количество открытых задач (возвращает число)
    function openTasks() public returns(uint8 result) {
        for (uint i = 0; i < keys.length - 1; i++) {
            if (tasks[uint8(keys[i])].isDone == false) {
                result+=1;
            }
        }
        return result;
    }

    //получить описание задачи по ключу
    function getTask(uint8 key) public returns(Task) {
        return tasks[key];
    }

    //получить список задач
    function getTasks() public returns(mapping(uint8 => Task)) {
        return tasks;
    }

    //отметить задачу как выполненную по ключу
    function taskIsDone(uint8 key) public returns(Task) {
        tasks[key].isDone == true;
        return tasks[key];
    }

    //удалить задачу по ключу
    function delTask(uint8 key) public returns(mapping(uint8 => Task)) {
        uint8 indexToDel = 0;
        for (uint8 i = 0; i < keys.length - 1; i++) {
            if (keys[i] == key) {
                indexToDel = i;
            }
        }
        delete tasks[key];
        for (uint8 i = indexToDel; i < keys.length - 1; i++) {
            keys[i] = keys[i+1];
        }
        keys.pop();
        return tasks;
    }

    constructor() public {
        tasks[1] = Task('One', 1, false);
        keys.push(1);
        tasks[2] = Task('Two', 2, false);
        keys.push(2);
        tasks[3] = Task('Three', 3, false);
        keys.push(3);
        require(tvm.pubkey() != 0, 101);
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();

        //timestamp = now;
    }

    function touch() external {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        //timestamp = now;
    }

    function sendValue(address dest, uint128 amount, bool bounce) public view {
        require(msg.pubkey() == tvm.pubkey(), 102);
        tvm.accept();
        dest.transfer(amount, bounce, 0);
    }
}
